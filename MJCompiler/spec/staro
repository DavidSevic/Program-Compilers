package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, COMMA, PRINT, RETURN, PLUS, EQUAL, VOID;
terminal Integer NUMBER ;
terminal String IDENT ;
terminal IF, ELSE;

nonterminal MethodDeclList, VarDecl;
nonterminal FormalParamList, FormalParamDecl, FormPars, ActualPars, ActualParamList; 
nonterminal StatementList, Statement, Addop;
nonterminal Unmatched, Matched;

nonterminal ConstDecl;
terminal numConst, charConst, boolConst; // kako da budu ekvivalentni Type ?????????????????????????????????

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, Designator, MethodDecl, MethodTypeName; 
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Expr, Factor, VarDeclList; 


// moje

Program ::= (Program) PROG IDENT:progName DeclList LBRACE MethodDeclList RBRACE ;

DeclList ::= (DeclList1) DeclList ConstDecl
			| (DeclList2) VarDecl
			| (DeclList3) ClassDecl
			| (DeclList4) RecordDecl
			| (DeclList5) /**/
			;

ConstDecl ::= (ConstDecl) CONST Type:varType IDENT:varName EQUALS ConstOption ConstDeclList SEMI ;

ConstOption ::= (ConstOption1) numConst 
				| (ConstOption2) charConst
				| (ConstOption3) boolConst
				;
				
ConstDeclList ::= (ConstDeclList1) ConstDeclList COMMA IDENT:varName EQUALS ConstOption
					| (ConstDeclList2) /**/
					;
					

VarDecl ::= (VarDecl) Type:varType IDENT:varName SqrdOption IdentList SEMI
			| (NoVarDecl)
			;
			
SqrdOption ::= (SqrdOption) LSQRD RSQRD 
				| (NoSqrdOption)
				;

IdentList ::= (VarDeclList) IdentList COMMA IDENT:varName SqrdOption

ClassDecl ::= (ClassDecl) CLASS IDENT:varName ExtendsOption LBRACE VarDeclList ConstrMethodOption RBRACE ;

ExtendsOption ::= (ExtendsOption) EXTENDS Type:varType
				| (NoExtendsOption)
				;
VarDeclList ::= (VarDeclList) VarDeclList VarDecl
			| (NoVarDeclList)
			;

ConstrMethodOption ::= (ConstrMethodOption) LBRACE ConstrDeclOption MethodDeclList RBRACE ;

ConstrDeclOption ::= (ConstrDeclOption) ConstructorDecl
					| (NoConstrDeclOption)
					; 

MethodDeclList ::= (MethodDeclList) MethodDeclList MethodDecl
				| (NoMethodDeclList)
				;

RecordDecl ::= (RecordDecl) RECORD IDENT:varName LBRACE VarDeclList RBRACE ;

MethodDecl ::= (MethodDecl) TypeVoidOption IDENT:varName LPAREN FormParsOption RPAREN VarDeclList LBRACE StatementList RBRACE ;

TypeVoidOption ::= (TypeVoidOption) Type:varType 
				| (TypeVoidOption) VOID
				;
				
FormParsOption ::= (FormParsOption) FormPars
				| (NoFormParsOption)
				;

ConstructorDecl ::= (ConstructorDecl) IDENT:varName LPAREN RPAREN VarDeclList LBRACE StatementList RBRACE ;

StatementList ::= (StatementList) StatementList Statement
				| (NoStatementList)
				;

FormPars ::= (FormPars) Type:varType IDENT:varName SqrdOption TypeIdentList ;

TypeIdentList ::= (TypeIdentList) TypeIdentList COMMA Type:varType IDENT:varName SqrdOption ;

Type ::= IDENT:varName ;

SingleStatement ::= (SingleStatement) DesignatorStatement SEMI ;

DesignatorStatement ::= (DesignatorStatement) ovde nastavi









// kraj moje

Program ::= (Program) PROG ProgName:p VarDeclList LBRACE MethodDeclList RBRACE 
;

ProgName ::= (ProgName) IDENT:pName 
;
							

VarDeclList ::= (VarDeclarations) VarDeclList VarDecl  
				|
				(NoVarDecl)/* epsilon */ 
				;
				
VarDecl ::= (VarDecl) Type:varType IDENT:varName SEMI 
;

Type ::= (Type) IDENT:typeName 
;

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
					|
					(NoMethodDecl)/* epsilon */
					;

MethodDecl ::= (MethodDecl) MethodTypeName
			   LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE 
			   ;

MethodTypeName ::= (MethodTypeName) Type:retType IDENT:methName
;

FormPars ::= (FormParams) FormalParamList | (NoFormParam) /* epsilon */ ;

FormalParamList ::= (FormalParamDecls) FormalParamList COMMA FormalParamDecl
					|
					(SingleFormalParamDecl) FormalParamDecl
					;
					
FormalParamDecl ::= (FormalParamDecl) Type IDENT ;

StatementList ::= (Statements) StatementList Statement 
					|
				  (NoStmt) /* epsilon */
				  ;

Statement ::= (MatchedStmt) Matched | (UnmachedStmt) Unmatched ;

Unmatched ::= (UnmatchedIf) IF Expr Statement | (UnmatchedIfElse) IF Expr Matched ELSE Unmatched;
	
				  
Matched ::= (Assignment) Designator:dest EQUAL Expr:e SEMI 
			  |
			  (ErrAssignment) Designator EQUAL error SEMI
			  {: parser.log.debug("Uspesan oporavak od greske pri dodeli vrednosti."); :}
			  |
			  (PrintStmt) PRINT LPAREN Expr RPAREN SEMI 
			  |
			  (ReturnExpr) RETURN Expr:t SEMI
			  |
			  (ReturnNoExpr) RETURN SEMI
			  | 
			  (MatchedIf) IF Expr Matched ELSE Matched
			  |
			  (ProcCall) Designator:func LPAREN ActualPars RPAREN SEMI
			  ;
			  
Expr ::= (AddExpr) Expr:te Addop Term:t
		 |
		 (TermExpr) Term:t
		 ;

Term ::= (Term) Factor:t 
;

Factor ::= (Const) NUMBER
			|
		   (Var) Designator:d
		    |
		   (FuncCall) Designator:func LPAREN ActualPars RPAREN
		   ;

ActualPars ::= (Actuals) ActualParamList 
				| 
			   (NoActuals) /* epsilon */ 
			   ;
			   
ActualParamList ::= (ActualParams) ActualParamList COMMA Expr
					|
					(ActualParam) Expr
					;

Designator ::= (Designator) IDENT:name
;

Addop ::= (Addop) PLUS ;
